// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Sobel_process_magnitude (
        ap_clk,
        ap_rst,
        real_data,
        imag_data,
        ap_return,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [7:0] real_data;
input  [7:0] imag_data;
output  [8:0] ap_return;
input   ap_ce;

reg   [7:0] imag_data_read_reg_48;
reg   [7:0] ap_reg_ppstg_imag_data_read_reg_48_pp0_iter1;
reg   [7:0] real_data_read_reg_53;
wire   [15:0] grad_1_fu_28_p2;
reg   [15:0] grad_1_reg_58;
wire   [16:0] grp_fu_40_p3;
reg   [16:0] sum32_reg_63;
wire   [8:0] grp_Sobel_fxp_sqrt_9_9_17_17_s_fu_20_ap_return;
reg    grp_Sobel_fxp_sqrt_9_9_17_17_s_fu_20_ap_ce;
wire   [7:0] grad_1_fu_28_p0;
wire   [15:0] real_data_cast_fu_25_p1;
wire   [7:0] grad_1_fu_28_p1;
wire   [7:0] grp_fu_40_p0;
wire   [15:0] imag_data_cast_fu_34_p1;
wire   [7:0] grp_fu_40_p1;
wire   [15:0] grp_fu_40_p2;
wire   [16:0] grp_fu_40_p20;

Sobel_fxp_sqrt_9_9_17_17_s grp_Sobel_fxp_sqrt_9_9_17_17_s_fu_20(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .in_val_V(sum32_reg_63),
    .ap_return(grp_Sobel_fxp_sqrt_9_9_17_17_s_fu_20_ap_return),
    .ap_ce(grp_Sobel_fxp_sqrt_9_9_17_17_s_fu_20_ap_ce)
);

Sobel_mac_muladd_8ns_8ns_16ns_17_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 17 ))
Sobel_mac_muladd_8ns_8ns_16ns_17_1_U4659(
    .din0(grp_fu_40_p0),
    .din1(grp_fu_40_p1),
    .din2(grp_fu_40_p2),
    .dout(grp_fu_40_p3)
);

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        ap_reg_ppstg_imag_data_read_reg_48_pp0_iter1 <= imag_data_read_reg_48;
        grad_1_reg_58 <= grad_1_fu_28_p2;
        imag_data_read_reg_48 <= imag_data;
        real_data_read_reg_53 <= real_data;
        sum32_reg_63 <= grp_fu_40_p3;
    end
end

always @ (*) begin
    if (~(1'b1 == ap_ce)) begin
        grp_Sobel_fxp_sqrt_9_9_17_17_s_fu_20_ap_ce = 1'b0;
    end else begin
        grp_Sobel_fxp_sqrt_9_9_17_17_s_fu_20_ap_ce = 1'b1;
    end
end

assign ap_return = grp_Sobel_fxp_sqrt_9_9_17_17_s_fu_20_ap_return;

assign grad_1_fu_28_p0 = real_data_cast_fu_25_p1;

assign grad_1_fu_28_p1 = real_data_cast_fu_25_p1;

assign grad_1_fu_28_p2 = (grad_1_fu_28_p0 * grad_1_fu_28_p1);

assign grp_fu_40_p0 = imag_data_cast_fu_34_p1;

assign grp_fu_40_p1 = imag_data_cast_fu_34_p1;

assign grp_fu_40_p2 = grp_fu_40_p20;

assign grp_fu_40_p20 = grad_1_reg_58;

assign imag_data_cast_fu_34_p1 = ap_reg_ppstg_imag_data_read_reg_48_pp0_iter1;

assign real_data_cast_fu_25_p1 = real_data_read_reg_53;

endmodule //Sobel_process_magnitude
